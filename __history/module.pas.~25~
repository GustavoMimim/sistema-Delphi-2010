unit module;

interface

uses
  Forms, Dialogs, SysUtils, Classes, DB, ADODB, IniFiles;

type
  TDm = class(TDataModule)
    sqlCity: TADOQuery;
    ADOConnection1: TADOConnection;
    procedure DataModuleCreate(Sender: TObject);
    procedure directsTypeList();
    procedure ListCities();
    procedure ListCustomers();
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Dm: TDm;

implementation

{$R *.dfm}

procedure TDm.DataModuleCreate(Sender: TObject);
var
 conf: TIniFile;
 strConn: String;

begin
  conf := TIniFile.Create(extractfilepath(ParamStr(0)) + 'conf.ini');

  strConn := conf.ReadString('access', 'stringConnection', 'Provider=SQLNCLI11.1;Integrated Security=SSPI;Persist Security Info=False;User ID="";Initial Catalog="";Data Source=localhost;Initial File Name="";Server SPN=""');

  ADOConnection1.Close;
  ADOConnection1.ConnectionString := strConn;

  Try
    ADOConnection1.Open();

  Except on E: Exception do
    begin
      ShowMessage('Não foi possível se conectar ao banco de dados.' +  #13 + 'Erro: ' + E.Message + #13 + 'Tente alterar a string de conexão em ./conf.ini.');
      Application.Terminate;
      exit;
    end;
  end;

  Try

    //Cria o banco de dados e as tabelas de clientes e cidade, caso não existam

    sqlCity.SQL.Clear;
    sqlCity.SQL.Add('IF NOT EXISTS(SELECT name FROM master.dbo.sysdatabases WHERE name = ' + QuotedStr('NEWCON_TEST') + ')' +
                    'BEGIN                          ' +
                    '  CREATE DATABASE NEWCON_TEST; ' +
                    'END                            ');

    sqlCity.SQL.Add('USE NEWCON_TEST;');

    sqlCity.SQL.Add('IF NOT EXISTS(SELECT name FROM sysobjects WHERE xtype = ' + QuotedStr('U') + ' AND name = ' + QuotedStr('clientes') + ')' +
                    'BEGIN                                            ' +
                    'CREATE TABLE clientes (                          ' +
                    '  codigo_cliente BIGINT NOT NULL, ' +
                    '  cgc_cpf_cliente NVARCHAR(14) NOT NULL,         ' +
                    '  nome NVARCHAR(150) NOT NULL,                   ' +
                    '  telefone NVARCHAR(50) NOT NULL,                ' +
                    '  endereco NVARCHAR(150) NOT NULL,               ' +
                    '  bairro NVARCHAR(150) NOT NULL,                 ' +
                    '  complemento NVARCHAR(150) NOT NULL,            ' +
                    '  e_mail NVARCHAR(100) NOT NULL,                 ' +
                    '  codigo_cidade BIGINT NOT NULL,                 ' +
                    '  cep NVARCHAR(14) NOT NULL                      ' +
                    ');                                               ' +
                    'END                                              ');

      sqlCity.SQL.Add('IF NOT EXISTS(SELECT name FROM sysobjects WHERE xtype = ' + QuotedStr('U') + ' AND name = ' + QuotedStr('cidades') + ')' +
                    'BEGIN                                           ' +
                    'CREATE TABLE cidades (                          ' +
                    '  codigo_cidade BIGINT NOT NULL, ' +
                    '  nome NVARCHAR(100) NOT NULL,                  ' +
                    '  estado NVARCHAR(100) NOT NULL,                ' +
                    '  cep_inicial NVARCHAR(8) NOT NULL,             ' +
                    '  cep_final NVARCHAR(8) NOT NULL                ' +
                    ');                                              ' +
                    'END                                             ');

    sqlCity.ExecSQL;

  Except on E: Exception do
    begin
      ShowMessage('Não foi possível criar as tabelas Cidades e Clientes automaticamente!' +  #13 + 'Erro: ' + E.Message);
      Application.Terminate;
      exit;
    end;
  end;

end;


procedure TForm1.directsTypeList();
begin

  if typeSelected = 'Cidades' then
    ListCities()
  else if typeSelected = 'Clientes' then
    ListCustomers();

  if lvRecords.Items.Count > 0 then
    lvRecords.ItemIndex := 0;

end;

procedure TForm1.ListCustomers();
var
  item: TListItem;
  searchFor: string;

begin

  lvRecords.Clear;

  lvRecords.Columns[2].Caption := 'Telefone';
  lvRecords.Columns[3].Caption := 'Cidade';

  dt.sqlCity.SQL.Clear;

  searchFor := QuotedStr('%' + txtSearch.Text + '%');

  dt.sqlCity.SQL.Add('SELECT codigo_cliente, clientes.nome, telefone, cidades.nome AS cidade from clientes LEFT JOIN cidades ON cidades.codigo_cidade = clientes.codigo_cidade ' +
  'WHERE clientes.nome LIKE ' + searchFor + ' OR codigo_cliente LIKE ' + searchFor + ' OR cep LIKE ' + searchFor);

  dt.sqlCity.Open;

  while not dt.sqlCity.Eof do
  begin

    item := lvRecords.Items.Add;

    item.Caption := dt.sqlCity.FieldByName('codigo_cliente').Value;

    item.SubItems.Add(dt.sqlCity.FieldByName('nome').Value);

    item.SubItems.Add(dt.sqlCity.FieldByName('telefone').Value);

    item.SubItems.Add(dt.sqlCity.FieldByName('cidade').Value);

    dt.sqlCity.Next;

  end;

end;

procedure TForm1.ListCities();
var
  item: TListItem;
  searchFor: string;

begin

  lvRecords.Clear;

  lvRecords.Columns[2].Caption := 'UF';
  lvRecords.Columns[3].Caption := 'Faixa de Cep';

  dt.sqlCity.SQL.Clear;

  searchFor := QuotedStr('%' + txtSearch.Text + '%');

  dt.sqlCity.SQL.Add('SELECT * from cidades WHERE nome LIKE ' + searchFor + ' OR codigo_cidade LIKE ' + searchFor + ' OR ' + QuotedStr(txtSearch.Text) + ' BETWEEN cep_inicial AND cep_final');

  dt.sqlCity.Open;

  while not dt.sqlCity.Eof do
  begin

    item := lvRecords.Items.Add;

    item.Caption := dt.sqlCity.FieldByName('codigo_cidade').Value;

    item.SubItems.Add(dt.sqlCity.FieldByName('nome').Value);

    item.SubItems.Add(dt.sqlCity.FieldByName('estado').Value);

    item.SubItems.Add(dt.sqlCity.FieldByName('cep_inicial').Value + ' a ' + dt.sqlCity.FieldByName('cep_final').Value);

    dt.sqlCity.Next;

  end;

end;

end.
